"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var augmented_wrapper_service_1 = require("./services/augmented.wrapper.service");
var validation_service_1 = require("./services/validation.service");
exports.AugmentedValidators = {
    contains: augmented_wrapper_service_1.getParamValidator('contains'),
    equals: augmented_wrapper_service_1.getParamValidator('equals'),
    isAfter: augmented_wrapper_service_1.getParamValidator('isAfter'),
    isAlpha: augmented_wrapper_service_1.getParamValidator('isAlpha'),
    isAlphanumeric: augmented_wrapper_service_1.getParamValidator('isAlphanumeric'),
    isAscii: augmented_wrapper_service_1.getParamValidator('isAscii'),
    isBase64: augmented_wrapper_service_1.getParamValidator('isBase64'),
    isBefore: augmented_wrapper_service_1.getParamValidator('isBefore'),
    isBoolean: augmented_wrapper_service_1.getParamValidator('isBoolean'),
    isByteLength: augmented_wrapper_service_1.getParamValidator('isByteLength'),
    isCreditCard: augmented_wrapper_service_1.getParamValidator('isCreditCard'),
    isCurrency: augmented_wrapper_service_1.getParamValidator('isCurrency'),
    isDataURI: augmented_wrapper_service_1.getParamValidator('isDataURI'),
    isDate: augmented_wrapper_service_1.getParamValidator('isDate'),
    isDecimal: augmented_wrapper_service_1.getParamValidator('isDecimal'),
    isDivisibleBy: augmented_wrapper_service_1.getParamValidator('isDivisibleBy'),
    isEmail: augmented_wrapper_service_1.getParamValidator('isEmail'),
    isEmpty: augmented_wrapper_service_1.getParamValidator('isEmpty'),
    isFloat: augmented_wrapper_service_1.getParamValidator('isFloat'),
    isFQDN: augmented_wrapper_service_1.getParamValidator('isFQDN'),
    isFullWidth: augmented_wrapper_service_1.getParamValidator('isFullWidth'),
    isHexColor: augmented_wrapper_service_1.getParamValidator('isHexColor'),
    isHexaDecimal: augmented_wrapper_service_1.getParamValidator('isHexaDecimal'),
    isInt: augmented_wrapper_service_1.getParamValidator('isInt'),
    isIP: augmented_wrapper_service_1.getParamValidator('isIP'),
    isISBN: augmented_wrapper_service_1.getParamValidator('isISBN'),
    isISSN: augmented_wrapper_service_1.getParamValidator('isISSN'),
    isISIN: augmented_wrapper_service_1.getParamValidator('isISIN'),
    isISO8601: augmented_wrapper_service_1.getParamValidator('isISO8601'),
    isIn: augmented_wrapper_service_1.getParamValidator('isIn'),
    isJSON: augmented_wrapper_service_1.getParamValidator('isJSON'),
    isLength: augmented_wrapper_service_1.getParamValidator('isLength'),
    isLowerCase: augmented_wrapper_service_1.getParamValidator('isLowerCase'),
    isMACAddress: augmented_wrapper_service_1.getParamValidator('isMACAddress'),
    isMD5: augmented_wrapper_service_1.getParamValidator('isMD5'),
    isMobilePhone: augmented_wrapper_service_1.getParamValidator('isMobilePhone'),
    isMongoId: augmented_wrapper_service_1.getParamValidator('isMongoId'),
    isMultibyte: augmented_wrapper_service_1.getParamValidator('isMultibyte'),
    isNumeric: augmented_wrapper_service_1.getParamValidator('isNumeric'),
    isSurrogatePair: augmented_wrapper_service_1.getParamValidator('isSurrogatePair'),
    isUpperCase: augmented_wrapper_service_1.getParamValidator('isUpperCase'),
    isURL: augmented_wrapper_service_1.getParamValidator('isURL'),
    isUUID: augmented_wrapper_service_1.getParamValidator('isUUID'),
    isVariableWidth: augmented_wrapper_service_1.getParamValidator('isVariableWidth'),
    isWhiteListed: augmented_wrapper_service_1.getParamValidator('isWhiteListed'),
    matches: augmented_wrapper_service_1.getParamValidator('matches'),
    passwordPattern: validation_service_1.ValidationService.passwordValidator()
};
