"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reselect_1 = require("reselect");
var fromRouter = require("@ngrx/router-store");
var env_config_1 = require("../../../shared-utils/app-env/env.config");
var compose_1 = require("@ngrx/core/compose");
var ngrx_store_freeze_1 = require("ngrx-store-freeze");
var store_1 = require("@ngrx/store");
var fromErrors = require("./error/error.reducer");
var fromLayouts = require("./layout/layout.reducer");
var fromProfiles = require("./profile/profile.reducer");
var fromUsersession = require("./usersession/usersession.reducer");
var reducers = {
    errors: fromErrors.reducer,
    layouts: fromLayouts.reducer,
    profiles: fromProfiles.reducer,
    usersession: fromUsersession.reducer,
    router: fromRouter.routerReducer
};
var developmentReducer = compose_1.compose(ngrx_store_freeze_1.storeFreeze, store_1.combineReducers)(reducers);
var productionReducer = store_1.combineReducers(reducers);
function reducer(state, action) {
    if (env_config_1.Config.ENV === 'PROD') {
        return productionReducer(state, action);
    }
    else {
        return developmentReducer(state, action);
    }
}
exports.reducer = reducer;
exports.getUsersessionState = function (state) { return state.usersession; };
exports.getUser = reselect_1.createSelector(exports.getUsersessionState, fromUsersession.getUser);
exports.getToken = reselect_1.createSelector(exports.getUsersessionState, fromUsersession.getToken);
exports.getUserLoading = reselect_1.createSelector(exports.getUsersessionState, fromUsersession.getUserLoading);
exports.getUserLoaded = reselect_1.createSelector(exports.getUsersessionState, fromUsersession.getUserLoaded);
exports.hasLoggedInUser = reselect_1.createSelector(exports.getToken, function (token) {
    return token !== '' ? true : false;
});
exports.getErrorState = function (state) { return state.errors; };
exports.getErrorIds = reselect_1.createSelector(exports.getErrorState, fromErrors.getIds);
exports.getErrorEntities = reselect_1.createSelector(exports.getErrorState, fromErrors.getEntities);
exports.getProfilesState = function (state) { return state.profiles; };
exports.getProfileIds = reselect_1.createSelector(exports.getProfilesState, fromProfiles.getIds);
exports.getProfileEntities = reselect_1.createSelector(exports.getProfilesState, fromProfiles.getEntities);
exports.getSelectedProfileId = reselect_1.createSelector(exports.getProfilesState, fromProfiles.getSelectedProfileId);
exports.getSelectedProfile = reselect_1.createSelector(exports.getProfilesState, fromProfiles.getSelectedProfile);
exports.getValidUserName = reselect_1.createSelector(exports.getProfilesState, fromProfiles.getValidUserName);
exports.getLayoutState = function (state) { return state.layouts; };
exports.getShowLoginDialog = reselect_1.createSelector(exports.getLayoutState, fromLayouts.getShowLoginDialog);
exports.getRequestedURL = reselect_1.createSelector(exports.getLayoutState, fromLayouts.getRequestedURL);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXRhLWxheWVyL25ncngtZGF0YS9yZWR1Y2Vycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUEwQztBQUUxQywrQ0FBaUQ7QUFDakQsdUVBQWtFO0FBVWxFLDhDQUE2QztBQU83Qyx1REFBZ0Q7QUFVaEQscUNBQThDO0FBUzlDLGtEQUFvRDtBQUNwRCxxREFBdUQ7QUFDdkQsd0RBQTBEO0FBQzFELG1FQUFxRTtBQXVCckUsSUFBTSxRQUFRLEdBQUc7SUFDZixNQUFNLEVBQUUsVUFBVSxDQUFDLE9BQU87SUFDMUIsT0FBTyxFQUFFLFdBQVcsQ0FBQyxPQUFPO0lBQzVCLFFBQVEsRUFBRSxZQUFZLENBQUMsT0FBTztJQUM5QixXQUFXLEVBQUUsZUFBZSxDQUFDLE9BQU87SUFDcEMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxhQUFhO0NBQ2pDLENBQUM7QUFFRixJQUFNLGtCQUFrQixHQUF5QixpQkFBTyxDQUFDLCtCQUFXLEVBQUUsdUJBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pHLElBQU0saUJBQWlCLEdBQXlCLHVCQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFMUUsaUJBQXdCLEtBQVUsRUFBRSxNQUFXO0lBQzdDLEVBQUUsQ0FBQyxDQUFDLG1CQUFNLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7QUFDSCxDQUFDO0FBTkQsMEJBTUM7QUFrQlksUUFBQSxtQkFBbUIsR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLEtBQUssQ0FBQyxXQUFXLEVBQWpCLENBQWlCLENBQUM7QUFZMUQsUUFBQSxPQUFPLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkUsUUFBQSxRQUFRLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekUsUUFBQSxjQUFjLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDckYsUUFBQSxhQUFhLEdBQUcseUJBQWMsQ0FBQywyQkFBbUIsRUFBRSxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDbkYsUUFBQSxlQUFlLEdBQUcseUJBQWMsQ0FBQyxnQkFBUSxFQUFFLFVBQUMsS0FBSztJQUNyRCxNQUFNLENBQUMsS0FBSyxLQUFJLEVBQUUsR0FBRyxJQUFJLEdBQUMsS0FBSyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBUVUsUUFBQSxhQUFhLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxLQUFLLENBQUMsTUFBTSxFQUFaLENBQVksQ0FBQztBQUUvQyxRQUFBLFdBQVcsR0FBRyx5QkFBYyxDQUFDLHFCQUFhLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9ELFFBQUEsZ0JBQWdCLEdBQUkseUJBQWMsQ0FBQyxxQkFBYSxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUkxRSxRQUFBLGdCQUFnQixHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLFFBQVEsRUFBZCxDQUFjLENBQUM7QUFFcEQsUUFBQSxhQUFhLEdBQUcseUJBQWMsQ0FBQyx3QkFBZ0IsRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEUsUUFBQSxrQkFBa0IsR0FBSSx5QkFBYyxDQUFDLHdCQUFnQixFQUFFLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqRixRQUFBLG9CQUFvQixHQUFJLHlCQUFjLENBQUMsd0JBQWdCLEVBQUUsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDNUYsUUFBQSxrQkFBa0IsR0FBSSx5QkFBYyxDQUFDLHdCQUFnQixFQUFFLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3hGLFFBQUEsZ0JBQWdCLEdBQUkseUJBQWMsQ0FBQyx3QkFBZ0IsRUFBRSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQVFwRixRQUFBLGNBQWMsR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLEtBQUssQ0FBQyxPQUFPLEVBQWIsQ0FBYSxDQUFDO0FBRWpELFFBQUEsa0JBQWtCLEdBQUcseUJBQWMsQ0FBQyxzQkFBYyxFQUFFLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXBGLFFBQUEsZUFBZSxHQUFHLHlCQUFjLENBQUMsc0JBQWMsRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMiLCJmaWxlIjoiYXBwL2RhdGEtbGF5ZXIvbmdyeC1kYXRhL3JlZHVjZXJzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCc7XG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0ICogYXMgZnJvbVJvdXRlciBmcm9tICdAbmdyeC9yb3V0ZXItc3RvcmUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkLXV0aWxzL2FwcC1lbnYvZW52LmNvbmZpZyc7XG5cbi8qKlxuICogVGhlIGNvbXBvc2UgZnVuY3Rpb24gaXMgb25lIG9mIG91ciBtb3N0IGhhbmR5IHRvb2xzLiBJbiBiYXNpYyB0ZXJtcywgeW91IGdpdmVcbiAqIGl0IGFueSBudW1iZXIgb2YgZnVuY3Rpb25zIGFuZCBpdCByZXR1cm5zIGEgZnVuY3Rpb24uIFRoaXMgbmV3IGZ1bmN0aW9uXG4gKiB0YWtlcyBhIHZhbHVlIGFuZCBjaGFpbnMgaXQgdGhyb3VnaCBldmVyeSBjb21wb3NlZCBmdW5jdGlvbiwgcmV0dXJuaW5nXG4gKiB0aGUgb3V0cHV0LlxuICpcbiAqIE1vcmU6IGh0dHBzOi8vZHJib29sZWFuLmdpdGJvb2tzLmlvL21vc3RseS1hZGVxdWF0ZS1ndWlkZS9jb250ZW50L2NoNS5odG1sXG4gKi9cbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdAbmdyeC9jb3JlL2NvbXBvc2UnO1xuXG4vKipcbiAqIHN0b3JlRnJlZXplIHByZXZlbnRzIHN0YXRlIGZyb20gYmVpbmcgbXV0YXRlZC4gV2hlbiBtdXRhdGlvbiBvY2N1cnMsIGFuXG4gKiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uIFRoaXMgaXMgdXNlZnVsIGR1cmluZyBkZXZlbG9wbWVudCBtb2RlIHRvXG4gKiBlbnN1cmUgdGhhdCBub25lIG9mIHRoZSByZWR1Y2VycyBhY2NpZGVudGFsbHkgbXV0YXRlcyB0aGUgc3RhdGUuXG4gKi9cbmltcG9ydCB7IHN0b3JlRnJlZXplIH0gZnJvbSAnbmdyeC1zdG9yZS1mcmVlemUnO1xuXG4vKipcbiAqIGNvbWJpbmVSZWR1Y2VycyBpcyBhbm90aGVyIHVzZWZ1bCBtZXRhcmVkdWNlciB0aGF0IHRha2VzIGEgbWFwIG9mIHJlZHVjZXJcbiAqIGZ1bmN0aW9ucyBhbmQgY3JlYXRlcyBhIG5ldyByZWR1Y2VyIHRoYXQgZ2F0aGVycyB0aGUgdmFsdWVzXG4gKiBvZiBlYWNoIHJlZHVjZXIgYW5kIHN0b3JlcyB0aGVtIHVzaW5nIHRoZSByZWR1Y2VyJ3Mga2V5LiBUaGluayBvZiBpdFxuICogYWxtb3N0IGxpa2UgYSBkYXRhYmFzZSwgd2hlcmUgZXZlcnkgcmVkdWNlciBpcyBhIHRhYmxlIGluIHRoZSBkYi5cbiAqXG4gKiBNb3JlOiBodHRwczovL2VnZ2hlYWQuaW8vbGVzc29ucy9qYXZhc2NyaXB0LXJlZHV4LWltcGxlbWVudGluZy1jb21iaW5lcmVkdWNlcnMtZnJvbS1zY3JhdGNoXG4gKi9cbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuXG4vKipcbiAqIEV2ZXJ5IHJlZHVjZXIgbW9kdWxlJ3MgZGVmYXVsdCBleHBvcnQgaXMgdGhlIHJlZHVjZXIgZnVuY3Rpb24gaXRzZWxmLiBJblxuICogYWRkaXRpb24sIGVhY2ggbW9kdWxlIHNob3VsZCBleHBvcnQgYSB0eXBlIG9yIGludGVyZmFjZSB0aGF0IGRlc2NyaWJlc1xuICogdGhlIHN0YXRlIG9mIHRoZSByZWR1Y2VyIHBsdXMgYW55IHNlbGVjdG9yIGZ1bmN0aW9ucy4gVGhlIGAqIGFzYFxuICogbm90YXRpb24gcGFja2FnZXMgdXAgYWxsIG9mIHRoZSBleHBvcnRzIGludG8gYSBzaW5nbGUgb2JqZWN0LlxuICovXG5pbXBvcnQgKiBhcyBmcm9tRXJyb3JzIGZyb20gJy4vZXJyb3IvZXJyb3IucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tTGF5b3V0cyBmcm9tICcuL2xheW91dC9sYXlvdXQucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tUHJvZmlsZXMgZnJvbSAnLi9wcm9maWxlL3Byb2ZpbGUucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tVXNlcnNlc3Npb24gZnJvbSAnLi91c2Vyc2Vzc2lvbi91c2Vyc2Vzc2lvbi5yZWR1Y2VyJztcblxuXG4vKipcbiAqIEFzIG1lbnRpb25lZCwgd2UgdHJlYXQgZWFjaCByZWR1Y2VyIGxpa2UgYSB0YWJsZSBpbiBhIGRhdGFiYXNlLiBUaGlzIG1lYW5zXG4gKiBvdXIgdG9wIGxldmVsIHN0YXRlIGludGVyZmFjZSBpcyBqdXN0IGEgbWFwIG9mIGtleXMgdG8gaW5uZXIgc3RhdGUgdHlwZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuICBlcnJvcnM6IGZyb21FcnJvcnMuU3RhdGU7XG4gIGxheW91dHM6IGZyb21MYXlvdXRzLlN0YXRlO1xuICBwcm9maWxlczogZnJvbVByb2ZpbGVzLlN0YXRlO1xuICB1c2Vyc2Vzc2lvbjogZnJvbVVzZXJzZXNzaW9uLlN0YXRlO1xuICByb3V0ZXI6IGZyb21Sb3V0ZXIuUm91dGVyU3RhdGU7XG59XG5cblxuLyoqXG4gKiBCZWNhdXNlIG1ldGFyZWR1Y2VycyB0YWtlIGEgcmVkdWNlciBmdW5jdGlvbiBhbmQgcmV0dXJuIGEgbmV3IHJlZHVjZXIsXG4gKiB3ZSBjYW4gdXNlIG91ciBjb21wb3NlIGhlbHBlciB0byBjaGFpbiB0aGVtIHRvZ2V0aGVyLiBIZXJlIHdlIGFyZVxuICogdXNpbmcgY29tYmluZVJlZHVjZXJzIHRvIG1ha2Ugb3VyIHRvcCBsZXZlbCByZWR1Y2VyLCBhbmQgdGhlblxuICogd3JhcHBpbmcgdGhhdCBpbiBzdG9yZUxvZ2dlci4gUmVtZW1iZXIgdGhhdCBjb21wb3NlIGFwcGxpZXNcbiAqIHRoZSByZXN1bHQgZnJvbSByaWdodCB0byBsZWZ0LlxuICovXG5jb25zdCByZWR1Y2VycyA9IHtcbiAgZXJyb3JzOiBmcm9tRXJyb3JzLnJlZHVjZXIsXG4gIGxheW91dHM6IGZyb21MYXlvdXRzLnJlZHVjZXIsXG4gIHByb2ZpbGVzOiBmcm9tUHJvZmlsZXMucmVkdWNlcixcbiAgdXNlcnNlc3Npb246IGZyb21Vc2Vyc2Vzc2lvbi5yZWR1Y2VyLFxuICByb3V0ZXI6IGZyb21Sb3V0ZXIucm91dGVyUmVkdWNlclxufTtcblxuY29uc3QgZGV2ZWxvcG1lbnRSZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPFN0YXRlPiA9IGNvbXBvc2Uoc3RvcmVGcmVlemUsIGNvbWJpbmVSZWR1Y2VycykocmVkdWNlcnMpO1xuY29uc3QgcHJvZHVjdGlvblJlZHVjZXI6IEFjdGlvblJlZHVjZXI8U3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGU6IGFueSwgYWN0aW9uOiBhbnkpIHtcbiAgaWYgKENvbmZpZy5FTlYgPT09ICdQUk9EJykge1xuICAgIHJldHVybiBwcm9kdWN0aW9uUmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGV2ZWxvcG1lbnRSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9XG59XG5cblxuLyoqXG4gKiBBIHNlbGVjdG9yIGZ1bmN0aW9uIGlzIGEgbWFwIGZ1bmN0aW9uIGZhY3RvcnkuIFdlIHBhc3MgaXQgcGFyYW1ldGVycyBhbmQgaXRcbiAqIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1hcHMgZnJvbSB0aGUgbGFyZ2VyIHN0YXRlIHRyZWUgaW50byBhIHNtYWxsZXJcbiAqIHBpZWNlIG9mIHN0YXRlLiBUaGlzIHNlbGVjdG9yIHNpbXBseSBzZWxlY3RzIHRoZSBgYm9va3NgIHN0YXRlLlxuICpcbiAqIFNlbGVjdG9ycyBhcmUgdXNlZCB3aXRoIHRoZSBgc2VsZWN0YCBvcGVyYXRvci5cbiAqXG4gKiBgYGB0c1xuICogY2xhc3MgTXlDb21wb25lbnQge1xuICogXHRjb25zdHJ1Y3RvcihzdGF0ZSQ6IE9ic2VydmFibGU8U3RhdGU+KSB7XG4gKiBcdCAgdGhpcy5ib29rc1N0YXRlJCA9IHN0YXRlJC5zZWxlY3QoZ2V0Qm9va3NTdGF0ZSk7XG4gKiBcdH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3QgZ2V0VXNlcnNlc3Npb25TdGF0ZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLnVzZXJzZXNzaW9uO1xuXG4vKipcbiAqIEV2ZXJ5IHJlZHVjZXIgbW9kdWxlIGV4cG9ydHMgc2VsZWN0b3IgZnVuY3Rpb25zLCBob3dldmVyIGNoaWxkIHJlZHVjZXJzXG4gKiBoYXZlIG5vIGtub3dsZWRnZSBvZiB0aGUgb3ZlcmFsbCBzdGF0ZSB0cmVlLiBUbyBtYWtlIHRoZW0gdXNlYWJsZSwgd2VcbiAqIG5lZWQgdG8gbWFrZSBuZXcgc2VsZWN0b3JzIHRoYXQgd3JhcCB0aGVtLlxuICpcbiAqIFRoZSBjcmVhdGVTZWxlY3RvciBmdW5jdGlvbiBmcm9tIHRoZSByZXNlbGVjdCBsaWJyYXJ5IGNyZWF0ZXNcbiAqIHZlcnkgZWZmaWNpZW50IHNlbGVjdG9ycyB0aGF0IGFyZSBtZW1vaXplZCBhbmQgb25seSByZWNvbXB1dGUgd2hlbiBhcmd1bWVudHMgY2hhbmdlLlxuICogVGhlIGNyZWF0ZWQgc2VsZWN0b3JzIGNhbiBhbHNvIGJlIGNvbXBvc2VkIHRvZ2V0aGVyIHRvIHNlbGVjdCBkaWZmZXJlbnRcbiAqIHBpZWNlcyBvZiBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFVzZXIgPSBjcmVhdGVTZWxlY3RvcihnZXRVc2Vyc2Vzc2lvblN0YXRlLCBmcm9tVXNlcnNlc3Npb24uZ2V0VXNlcik7XG5leHBvcnQgY29uc3QgZ2V0VG9rZW4gPSBjcmVhdGVTZWxlY3RvcihnZXRVc2Vyc2Vzc2lvblN0YXRlLCBmcm9tVXNlcnNlc3Npb24uZ2V0VG9rZW4pO1xuZXhwb3J0IGNvbnN0IGdldFVzZXJMb2FkaW5nID0gY3JlYXRlU2VsZWN0b3IoZ2V0VXNlcnNlc3Npb25TdGF0ZSwgZnJvbVVzZXJzZXNzaW9uLmdldFVzZXJMb2FkaW5nKTtcbmV4cG9ydCBjb25zdCBnZXRVc2VyTG9hZGVkID0gY3JlYXRlU2VsZWN0b3IoZ2V0VXNlcnNlc3Npb25TdGF0ZSwgZnJvbVVzZXJzZXNzaW9uLmdldFVzZXJMb2FkZWQpO1xuZXhwb3J0IGNvbnN0IGhhc0xvZ2dlZEluVXNlciA9IGNyZWF0ZVNlbGVjdG9yKGdldFRva2VuLCAodG9rZW4pID0+IHtcbiAgICAgICAgIHJldHVybiB0b2tlbiAhPT0nJyA/IHRydWU6ZmFsc2U7XG59KTtcblxuXG5cbi8qKlxuICogSnVzdCBsaWtlIHdpdGggdGhlIGJvb2tzIHNlbGVjdG9ycywgd2UgYWxzbyBoYXZlIHRvIGNvbXBvc2UgdGhlIHNlYXJjaFxuICogcmVkdWNlcidzIGFuZCBjb2xsZWN0aW9uIHJlZHVjZXIncyBzZWxlY3RvcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRFcnJvclN0YXRlID0gKHN0YXRlOiBTdGF0ZSkgPT4gc3RhdGUuZXJyb3JzO1xuXG5leHBvcnQgY29uc3QgZ2V0RXJyb3JJZHMgPSBjcmVhdGVTZWxlY3RvcihnZXRFcnJvclN0YXRlLCBmcm9tRXJyb3JzLmdldElkcyk7XG5leHBvcnQgY29uc3QgZ2V0RXJyb3JFbnRpdGllcyAgPSBjcmVhdGVTZWxlY3RvcihnZXRFcnJvclN0YXRlLCBmcm9tRXJyb3JzLmdldEVudGl0aWVzKTtcblxuXG5cbmV4cG9ydCBjb25zdCBnZXRQcm9maWxlc1N0YXRlID0gKHN0YXRlOiBTdGF0ZSkgPT4gc3RhdGUucHJvZmlsZXM7XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9maWxlSWRzID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZmlsZXNTdGF0ZSwgZnJvbVByb2ZpbGVzLmdldElkcyk7XG5leHBvcnQgY29uc3QgZ2V0UHJvZmlsZUVudGl0aWVzICA9IGNyZWF0ZVNlbGVjdG9yKGdldFByb2ZpbGVzU3RhdGUsIGZyb21Qcm9maWxlcy5nZXRFbnRpdGllcyk7XG5leHBvcnQgY29uc3QgZ2V0U2VsZWN0ZWRQcm9maWxlSWQgID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZmlsZXNTdGF0ZSwgZnJvbVByb2ZpbGVzLmdldFNlbGVjdGVkUHJvZmlsZUlkKTtcbmV4cG9ydCBjb25zdCBnZXRTZWxlY3RlZFByb2ZpbGUgID0gY3JlYXRlU2VsZWN0b3IoZ2V0UHJvZmlsZXNTdGF0ZSwgZnJvbVByb2ZpbGVzLmdldFNlbGVjdGVkUHJvZmlsZSk7XG5leHBvcnQgY29uc3QgZ2V0VmFsaWRVc2VyTmFtZSAgPSBjcmVhdGVTZWxlY3RvcihnZXRQcm9maWxlc1N0YXRlLCBmcm9tUHJvZmlsZXMuZ2V0VmFsaWRVc2VyTmFtZSk7XG5cblxuXG5cbi8qKlxuICogTGF5b3V0IFJlZHVjZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRMYXlvdXRTdGF0ZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLmxheW91dHM7XG5cbmV4cG9ydCBjb25zdCBnZXRTaG93TG9naW5EaWFsb2cgPSBjcmVhdGVTZWxlY3RvcihnZXRMYXlvdXRTdGF0ZSwgZnJvbUxheW91dHMuZ2V0U2hvd0xvZ2luRGlhbG9nKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlcXVlc3RlZFVSTCA9IGNyZWF0ZVNlbGVjdG9yKGdldExheW91dFN0YXRlLCBmcm9tTGF5b3V0cy5nZXRSZXF1ZXN0ZWRVUkwpO1xuIl19
