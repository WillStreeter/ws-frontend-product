"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PortalActionTypes = require("../../../../business-layer/shared-types/actions/portal.action.types");
var initialState = {
    viewablePerPage: 10,
    revealAddGarmentRow: false,
    currentPage: 1,
    totalPages: 5,
    sortDirection: 'Ascending',
    sortBase: 'Name',
};
function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case PortalActionTypes.UPDATE_VIEWABLE_PER_PAGE_COUNT: {
            return Object.assign({}, state, { viewablePerPage: action.payload });
        }
        case PortalActionTypes.SET_CURRENT_PAGE_NUMBER: {
            return Object.assign({}, state, { currentPage: action.payload });
        }
        case PortalActionTypes.UPDATE_REVEAL_GARMENT_ADD_ROW: {
            return Object.assign({}, state, { revealAddGarmentRow: action.payload });
        }
        case PortalActionTypes.UPDATE_SORT_STATE: {
            var sortRequest = (action.payload);
            return Object.assign({}, state, { sortDirection: !sortRequest.directionChange ?
                    state.sortDirection : (state.sortDirection === "Ascending") ?
                    "Descending" : "Ascending",
                sortBase: sortRequest.base ? sortRequest.base : state.sortBase });
        }
        default:
            return state;
    }
}
exports.reducer = reducer;
exports.getRevealAddGarmentRow = function (state) { return state.revealAddGarmentRow; };
exports.getViewablePerPage = function (state) { return state.viewablePerPage; };
exports.getCurrentPage = function (state) { return state.currentPage; };
exports.getSortType = function (state) { return state.sortDirection; };
exports.getSortBase = function (state) { return state.sortBase; };
exports.getSortState = function (state) { return Object.assign({}, { sortDirection: state.sortDirection, sortBase: state.sortBase }); };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXRhLWxheWVyL25ncngtZGF0YS9yZWR1Y2Vycy9wb3J0YWwvcG9ydGFsLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1R0FBeUc7QUFhekcsSUFBTSxZQUFZLEdBQVU7SUFDMUIsZUFBZSxFQUFDLEVBQUU7SUFDbEIsbUJBQW1CLEVBQUMsS0FBSztJQUN6QixXQUFXLEVBQUMsQ0FBQztJQUNiLFVBQVUsRUFBQyxDQUFDO0lBQ1osYUFBYSxFQUFDLFdBQVc7SUFDekIsUUFBUSxFQUFDLE1BQU07Q0FDaEIsQ0FBQztBQUVGLGlCQUF3QixLQUFvQixFQUFFLE1BQXNCO0lBQTVDLHNCQUFBLEVBQUEsb0JBQW9CO0lBQzFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssaUJBQWlCLENBQUMsOEJBQThCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFJLEVBQUMsZUFBZSxFQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7UUFDRCxLQUFLLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBSSxFQUFDLFdBQVcsRUFBQyxNQUFNLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBRUQsS0FBSyxpQkFBaUIsQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUksRUFBQyxtQkFBbUIsRUFBQyxNQUFNLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUM1RSxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3pDLElBQU0sV0FBVyxHQUFzQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV4RSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFJLEVBQUMsYUFBYSxFQUFDLENBQUMsV0FBVyxDQUFDLGVBQWU7b0JBQzVCLEtBQUssQ0FBQyxhQUFhLEdBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxLQUFHLFdBQVcsQ0FBQztvQkFDdkQsWUFBWSxHQUFDLFdBQVc7Z0JBRXRDLFFBQVEsRUFBQyxXQUFXLENBQUMsSUFBSSxHQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEcsQ0FBQztRQUVEO1lBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQztBQXpCRCwwQkF5QkM7QUFFWSxRQUFBLHNCQUFzQixHQUFFLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLG1CQUFtQixFQUF6QixDQUF5QixDQUFDO0FBQ3BFLFFBQUEsa0JBQWtCLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxLQUFLLENBQUMsZUFBZSxFQUFyQixDQUFxQixDQUFDO0FBQzdELFFBQUEsY0FBYyxHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLFdBQVcsRUFBakIsQ0FBaUIsQ0FBQztBQUNyRCxRQUFBLFdBQVcsR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLEtBQUssQ0FBQyxhQUFhLEVBQW5CLENBQW1CLENBQUM7QUFDcEQsUUFBQSxXQUFXLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxLQUFLLENBQUMsUUFBUSxFQUFkLENBQWMsQ0FBQztBQUMvQyxRQUFBLFlBQVksR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLEVBQUMsYUFBYSxFQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUMsQ0FBQyxFQUE5RSxDQUE4RSxDQUFDIiwiZmlsZSI6ImFwcC9kYXRhLWxheWVyL25ncngtZGF0YS9yZWR1Y2Vycy9wb3J0YWwvcG9ydGFsLnJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwb3J0YWwgZnJvbSAnLi4vLi4vYWN0aW9ucy9wb3J0YWwuYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBQb3J0YWxBY3Rpb25UeXBlcyBmcm9tICcuLi8uLi8uLi8uLi9idXNpbmVzcy1sYXllci9zaGFyZWQtdHlwZXMvYWN0aW9ucy9wb3J0YWwuYWN0aW9uLnR5cGVzJztcbmltcG9ydCB7IFNvcnRSZXF1ZXN0TW9kZWwgfSBmcm9tIFwiLi4vLi4vLi4vLi4vYnVzaW5lc3MtbGF5ZXIvbW9kZWxzL3NvcnRSZXF1ZXN0Lm1vZGVsXCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XG4gIHZpZXdhYmxlUGVyUGFnZTpudW1iZXI7XG4gIHJldmVhbEFkZEdhcm1lbnRSb3c6Ym9vbGVhbixcbiAgY3VycmVudFBhZ2U6bnVtYmVyO1xuICB0b3RhbFBhZ2VzOm51bWJlcjtcbiAgc29ydERpcmVjdGlvbjpzdHJpbmc7XG4gIHNvcnRCYXNlOnN0cmluZztcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBTdGF0ZSA9IHtcbiAgdmlld2FibGVQZXJQYWdlOjEwLFxuICByZXZlYWxBZGRHYXJtZW50Um93OmZhbHNlLFxuICBjdXJyZW50UGFnZToxLFxuICB0b3RhbFBhZ2VzOjUsXG4gIHNvcnREaXJlY3Rpb246J0FzY2VuZGluZycsXG4gIHNvcnRCYXNlOidOYW1lJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IHBvcnRhbC5BY3Rpb25zKTogU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBQb3J0YWxBY3Rpb25UeXBlcy5VUERBVEVfVklFV0FCTEVfUEVSX1BBR0VfQ09VTlQ6IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCAgIHt2aWV3YWJsZVBlclBhZ2U6YWN0aW9uLnBheWxvYWR9KTtcbiAgICB9XG4gICAgY2FzZSBQb3J0YWxBY3Rpb25UeXBlcy5TRVRfQ1VSUkVOVF9QQUdFX05VTUJFUjoge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsICAge2N1cnJlbnRQYWdlOmFjdGlvbi5wYXlsb2FkfSk7XG4gICAgfVxuXG4gICAgY2FzZSBQb3J0YWxBY3Rpb25UeXBlcy5VUERBVEVfUkVWRUFMX0dBUk1FTlRfQUREX1JPVzoge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsICAge3JldmVhbEFkZEdhcm1lbnRSb3c6YWN0aW9uLnBheWxvYWR9KTtcbiAgICB9XG4gICAgY2FzZSBQb3J0YWxBY3Rpb25UeXBlcy5VUERBVEVfU09SVF9TVEFURToge1xuICAgICAgY29uc3Qgc29ydFJlcXVlc3Q6U29ydFJlcXVlc3RNb2RlbCA9IDxTb3J0UmVxdWVzdE1vZGVsPihhY3Rpb24ucGF5bG9hZCk7XG5cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgICB7c29ydERpcmVjdGlvbjohc29ydFJlcXVlc3QuZGlyZWN0aW9uQ2hhbmdlP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnNvcnREaXJlY3Rpb246KHN0YXRlLnNvcnREaXJlY3Rpb249PT1cIkFzY2VuZGluZ1wiKT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRlc2NlbmRpbmdcIjpcIkFzY2VuZGluZ1wiLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRCYXNlOnNvcnRSZXF1ZXN0LmJhc2U/c29ydFJlcXVlc3QuYmFzZTpzdGF0ZS5zb3J0QmFzZSB9KTtcbiAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRSZXZlYWxBZGRHYXJtZW50Um93PSAoc3RhdGU6IFN0YXRlKSA9PiBzdGF0ZS5yZXZlYWxBZGRHYXJtZW50Um93O1xuZXhwb3J0IGNvbnN0IGdldFZpZXdhYmxlUGVyUGFnZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLnZpZXdhYmxlUGVyUGFnZTtcbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50UGFnZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLmN1cnJlbnRQYWdlO1xuZXhwb3J0IGNvbnN0IGdldFNvcnRUeXBlID0gKHN0YXRlOiBTdGF0ZSkgPT4gc3RhdGUuc29ydERpcmVjdGlvbjtcbmV4cG9ydCBjb25zdCBnZXRTb3J0QmFzZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLnNvcnRCYXNlO1xuZXhwb3J0IGNvbnN0IGdldFNvcnRTdGF0ZSA9IChzdGF0ZTogU3RhdGUpID0+IE9iamVjdC5hc3NpZ24oe30se3NvcnREaXJlY3Rpb246c3RhdGUuc29ydERpcmVjdGlvbiwgc29ydEJhc2U6c3RhdGUuc29ydEJhc2V9KTtcblxuIl19
