"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PortalActionTypes = require("../../../../business-layer/shared-types/actions/portal.action.types");
var initialState = {
    viewablePerPage: 10,
    currentPage: 1,
    totalPages: 5,
    sortDirection: 'Ascending',
    sortBase: 'Name',
};
function reducer(state, action) {
    if (state === void 0) { state = initialState; }
    switch (action.type) {
        case PortalActionTypes.UPDATE_VIEWABLE_PER_PAGE_COUNT: {
            return Object.assign({}, state, { viewablePerPage: action.payload });
        }
        case PortalActionTypes.SET_CURRENT_PAGE_NUMBER: {
            return Object.assign({}, state, { currentPage: action.payload });
        }
        case PortalActionTypes.UPDATE_SORT_STATE: {
            var sortRequest = (action.payload);
            return Object.assign({}, state, { sortDirection: sortRequest.directionChange ? sortRequest.direction : state.sortDirection,
                sortBase: sortRequest.base ? sortRequest.base : state.sortBase });
        }
        default:
            return state;
    }
}
exports.reducer = reducer;
exports.getViewablePerPage = function (state) { return state.viewablePerPage; };
exports.getCurrentPage = function (state) { return state.currentPage; };
exports.getSortType = function (state) { return state.sortDirection; };
exports.getSortBase = function (state) { return state.sortBase; };
exports.getSortState = function (state) { return Object.assign({}, { sortDirection: state.sortDirection, sortBase: state.sortBase }); };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXRhLWxheWVyL25ncngtZGF0YS9yZWR1Y2Vycy9wb3J0YWwvcG9ydGFsLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1R0FBeUc7QUFZekcsSUFBTSxZQUFZLEdBQVU7SUFDMUIsZUFBZSxFQUFDLEVBQUU7SUFDbEIsV0FBVyxFQUFDLENBQUM7SUFDYixVQUFVLEVBQUMsQ0FBQztJQUNaLGFBQWEsRUFBQyxXQUFXO0lBQ3pCLFFBQVEsRUFBQyxNQUFNO0NBQ2hCLENBQUM7QUFFRixpQkFBd0IsS0FBb0IsRUFBRSxNQUFzQjtJQUE1QyxzQkFBQSxFQUFBLG9CQUFvQjtJQUMxQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwQixLQUFLLGlCQUFpQixDQUFDLDhCQUE4QixFQUFFLENBQUM7WUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBSSxFQUFDLGVBQWUsRUFBQyxNQUFNLENBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUN4RSxDQUFDO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUksRUFBQyxXQUFXLEVBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDcEUsQ0FBQztRQUVELEtBQUssaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUN6QyxJQUFNLFdBQVcsR0FBc0MsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFeEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBSSxFQUFDLGFBQWEsRUFBQyxXQUFXLENBQUMsZUFBZSxHQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUMsS0FBSyxDQUFDLGFBQWE7Z0JBQ25GLFFBQVEsRUFBQyxXQUFXLENBQUMsSUFBSSxHQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEcsQ0FBQztRQUVEO1lBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0FBQ0gsQ0FBQztBQW5CRCwwQkFtQkM7QUFFWSxRQUFBLGtCQUFrQixHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLGVBQWUsRUFBckIsQ0FBcUIsQ0FBQztBQUM3RCxRQUFBLGNBQWMsR0FBRyxVQUFDLEtBQVksSUFBSyxPQUFBLEtBQUssQ0FBQyxXQUFXLEVBQWpCLENBQWlCLENBQUM7QUFDckQsUUFBQSxXQUFXLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxLQUFLLENBQUMsYUFBYSxFQUFuQixDQUFtQixDQUFDO0FBQ3BELFFBQUEsV0FBVyxHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLFFBQVEsRUFBZCxDQUFjLENBQUM7QUFDL0MsUUFBQSxZQUFZLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxFQUFDLGFBQWEsRUFBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBQyxLQUFLLENBQUMsUUFBUSxFQUFDLENBQUMsRUFBOUUsQ0FBOEUsQ0FBQyIsImZpbGUiOiJhcHAvZGF0YS1sYXllci9uZ3J4LWRhdGEvcmVkdWNlcnMvcG9ydGFsL3BvcnRhbC5yZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcG9ydGFsIGZyb20gJy4uLy4uL2FjdGlvbnMvcG9ydGFsLmFjdGlvbnMnO1xuaW1wb3J0ICogYXMgUG9ydGFsQWN0aW9uVHlwZXMgZnJvbSAnLi4vLi4vLi4vLi4vYnVzaW5lc3MtbGF5ZXIvc2hhcmVkLXR5cGVzL2FjdGlvbnMvcG9ydGFsLmFjdGlvbi50eXBlcyc7XG5pbXBvcnQgeyBTb3J0UmVxdWVzdE1vZGVsIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2J1c2luZXNzLWxheWVyL21vZGVscy9zb3J0UmVxdWVzdC5tb2RlbFwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuICB2aWV3YWJsZVBlclBhZ2U6bnVtYmVyO1xuICBjdXJyZW50UGFnZTpudW1iZXI7XG4gIHRvdGFsUGFnZXM6bnVtYmVyO1xuICBzb3J0RGlyZWN0aW9uOnN0cmluZztcbiAgc29ydEJhc2U6c3RyaW5nO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IFN0YXRlID0ge1xuICB2aWV3YWJsZVBlclBhZ2U6MTAsXG4gIGN1cnJlbnRQYWdlOjEsXG4gIHRvdGFsUGFnZXM6NSxcbiAgc29ydERpcmVjdGlvbjonQXNjZW5kaW5nJyxcbiAgc29ydEJhc2U6J05hbWUnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbjogcG9ydGFsLkFjdGlvbnMpOiBTdGF0ZSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFBvcnRhbEFjdGlvblR5cGVzLlVQREFURV9WSUVXQUJMRV9QRVJfUEFHRV9DT1VOVDoge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsICAge3ZpZXdhYmxlUGVyUGFnZTphY3Rpb24ucGF5bG9hZH0pO1xuICAgIH1cbiAgICBjYXNlIFBvcnRhbEFjdGlvblR5cGVzLlNFVF9DVVJSRU5UX1BBR0VfTlVNQkVSOiB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgICB7Y3VycmVudFBhZ2U6YWN0aW9uLnBheWxvYWR9KTtcbiAgICB9XG5cbiAgICBjYXNlIFBvcnRhbEFjdGlvblR5cGVzLlVQREFURV9TT1JUX1NUQVRFOiB7XG4gICAgICBjb25zdCBzb3J0UmVxdWVzdDpTb3J0UmVxdWVzdE1vZGVsID0gPFNvcnRSZXF1ZXN0TW9kZWw+KGFjdGlvbi5wYXlsb2FkKTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCAgIHtzb3J0RGlyZWN0aW9uOnNvcnRSZXF1ZXN0LmRpcmVjdGlvbkNoYW5nZT9zb3J0UmVxdWVzdC5kaXJlY3Rpb246c3RhdGUuc29ydERpcmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydEJhc2U6c29ydFJlcXVlc3QuYmFzZT9zb3J0UmVxdWVzdC5iYXNlOnN0YXRlLnNvcnRCYXNlIH0pO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldFZpZXdhYmxlUGVyUGFnZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLnZpZXdhYmxlUGVyUGFnZTtcbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50UGFnZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLmN1cnJlbnRQYWdlO1xuZXhwb3J0IGNvbnN0IGdldFNvcnRUeXBlID0gKHN0YXRlOiBTdGF0ZSkgPT4gc3RhdGUuc29ydERpcmVjdGlvbjtcbmV4cG9ydCBjb25zdCBnZXRTb3J0QmFzZSA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLnNvcnRCYXNlO1xuZXhwb3J0IGNvbnN0IGdldFNvcnRTdGF0ZSA9IChzdGF0ZTogU3RhdGUpID0+IE9iamVjdC5hc3NpZ24oe30se3NvcnREaXJlY3Rpb246c3RhdGUuc29ydERpcmVjdGlvbiwgc29ydEJhc2U6c3RhdGUuc29ydEJhc2V9KTtcblxuIl19
