"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reselect_1 = require("reselect");
var ProfileActionTypes = require("../../../../business-layer/shared-types/actions/profile.action.types");
exports.initialState = {
    ids: [],
    entities: {},
    selectedProfileId: null,
    validUserName: null
};
function reducer(state, action) {
    if (state === void 0) { state = exports.initialState; }
    switch (action.type) {
        case ProfileActionTypes.REGISTER_USER_SUCCESS:
        case ProfileActionTypes.EDIT_USER_PROFILE_SUCCESS:
        case ProfileActionTypes.GET_USER_PROFILE_SUCCESS: {
            var user = void 0;
            if (action.payload.hasOwnProperty('user') ||
                action.payload.hasOwnProperty('username')) {
                var user_1 = action.payload.hasOwnProperty('user') ? (action.payload.user) : (action.payload);
                if (state.ids.indexOf(user_1.id) > -1) {
                    return state;
                }
                return {
                    ids: state.ids.concat([user_1.id]),
                    entities: Object.assign({}, state.entities, (_a = {},
                        _a[user_1.id] = user_1,
                        _a)),
                    selectedProfileId: user_1.id,
                    validUserName: state.validUserName
                };
            }
            else {
                return state;
            }
        }
        case ProfileActionTypes.CHECK_USER_PROFILE_NAME_SUCCESS: {
            if (action.payload) {
                var validUserName = ((action.payload).hasOwnProperty('username')) ? 'inValid' : 'valid';
                return Object.assign({}, state, { validUserName: validUserName });
            }
            return state;
        }
        case ProfileActionTypes.CHECK_USER_PROFILE_NAME_FAILURE: {
            return Object.assign({}, state, { validUserName: 'valid' });
        }
        case ProfileActionTypes.RESET_USER_PROFILE_NAME_VALID: {
            return Object.assign({}, state, { validUserName: 'invalid' });
        }
        case ProfileActionTypes.SET_SELECTED_PROFILE_ID: {
            if (state.ids.indexOf(action.payload) > -1) {
                return Object.assign({}, state, { selectedProfileId: action.payload });
            }
            else {
                return state;
            }
        }
        default: {
            return state;
        }
    }
    var _a;
}
exports.reducer = reducer;
exports.getEntities = function (state) { return state.entities; };
exports.getIds = function (state) { return state.ids; };
exports.getSelectedProfileId = function (state) { return state.selectedProfileId; };
exports.getValidUserName = function (state) { return state.validUserName; };
exports.getSelectedProfile = reselect_1.createSelector(exports.getEntities, exports.getSelectedProfileId, function (entities, selectedProfileId) {
    return entities[selectedProfileId];
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
