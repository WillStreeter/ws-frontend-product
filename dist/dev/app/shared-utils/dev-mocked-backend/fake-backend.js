"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var testing_1 = require("@angular/http/testing");
var MockError = (function (_super) {
    __extends(MockError, _super);
    function MockError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MockError;
}(http_1.Response));
function fakeBackendFactory(backend, options, realBackend) {
    var users = JSON.parse(localStorage.getItem('users')) || [];
    backend.connections.subscribe(function (connection) {
        setTimeout(function () {
            if (connection.request.url.endsWith('api/Authorizations/Login') &&
                connection.request.method === http_1.RequestMethod.Post) {
                var params_1 = JSON.parse(connection.request.getBody());
                if (!localStorage.getItem('users') && params_1.username === 'taobing') {
                    localStorage.setItem('users', JSON.stringify({
                        id: '12345',
                        username: 'taobing',
                        password: 'password',
                        firstname: 'Thor',
                        lastname: 'Newssen',
                        email: 'tn@gm.com',
                        token: '12345-fake-jwt-token'
                    }));
                    users = [JSON.parse(localStorage.getItem('users'))];
                }
                var filteredUsers = users.filter(function (user) {
                    return user.username === params_1.username && user.password === params_1.password;
                });
                if (filteredUsers.length) {
                    var aUser = filteredUsers[0];
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({
                        status: 200,
                        body: { account: {
                                user: aUser,
                                token: aUser.token
                            }
                        }
                    })));
                }
                else {
                    var body = JSON.stringify({ error: 'Username or password is incorrect' });
                    var opts = { type: http_1.ResponseType.Error, status: 400, body: body };
                    var responseOpts = new http_1.ResponseOptions(opts);
                    connection.mockError(new MockError(responseOpts));
                }
                return;
            }
            if (connection.request.url.endsWith('api/Authorizations/Logout') &&
                connection.request.method === http_1.RequestMethod.Post) {
                var userOut = { status: 200,
                    general: {
                        message: 'user logged out',
                        success: true
                    }
                };
                connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 200, body: userOut })));
                return;
            }
            if (connection.request.url.match(/\/api\/Users\/username\/\w+$/) &&
                connection.request.method === http_1.RequestMethod.Get) {
                var urlParts = connection.request.url.split('/');
                var username_1 = urlParts[urlParts.length - 1];
                if (!localStorage.getItem('users') && username_1 === 'taobing') {
                    localStorage.setItem('users', JSON.stringify({
                        id: '12345',
                        username: 'taobing',
                        password: 'password',
                        firstname: 'Thor',
                        lastname: 'Newssen',
                        email: 'tn@gm.com',
                        token: '12345-fake-jwt-token'
                    }));
                    users = [JSON.parse(localStorage.getItem('users'))];
                }
                var duplicateUser = users.filter(function (user) { return user.username === username_1; });
                if (duplicateUser && duplicateUser.length > 0) {
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({
                        status: 200,
                        body: { user: duplicateUser[0] }
                    })));
                }
                else {
                    var body = JSON.stringify({ error: 'username does not exit' });
                    var opts = { type: http_1.ResponseType.Error, status: 404, body: body };
                    var responseOpts = new http_1.ResponseOptions(opts);
                    connection.mockError(new MockError(responseOpts));
                }
                return;
            }
            if (connection.request.url.match(/\/api\/Users\/\d+$/) &&
                connection.request.method === http_1.RequestMethod.Get) {
                if (connection.request.headers.get('Authorization') === 'Bearer fake-jwt-token') {
                    var urlParts = connection.request.url.split('/');
                    var id_1 = parseInt(urlParts[urlParts.length - 1]);
                    var matchedUsers = users.filter(function (user) { return user.id === id_1; });
                    var user = matchedUsers.length ? matchedUsers[0] : null;
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 200, body: user })));
                }
                else {
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 401 })));
                }
                return;
            }
            if (connection.request.url.endsWith('/api/Users') && connection.request.method === http_1.RequestMethod.Post) {
                var newUser_1 = JSON.parse(connection.request.getBody());
                var duplicateUser = users.filter(function (user) { return user.username === newUser_1.username; }).length;
                if (duplicateUser) {
                    return connection.mockError(new Error('Username "' + newUser_1.username + '" is already taken'));
                }
                newUser_1.id = users.length + Math.floor(Math.random() * (100 - 1)) + 1;
                users.push(newUser_1);
                localStorage.setItem('users', JSON.stringify(users));
                var userRtrn = { status: 200,
                    account: {
                        user: newUser_1,
                        token: 'jwt-token-creation'
                    }
                };
                connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 200, body: userRtrn })));
                return;
            }
            if (connection.request.url.match(/\/api\/Users\/\d+$/) &&
                connection.request.method === http_1.RequestMethod.Delete) {
                if (connection.request.headers.get('Authorization') === 'Bearer fake-jwt-token') {
                    var urlParts = connection.request.url.split('/');
                    var id = parseInt(urlParts[urlParts.length - 1]);
                    for (var i = 0; i < users.length; i++) {
                        var user = users[i];
                        if (user.id === id) {
                            users.splice(i, 1);
                            localStorage.setItem('users', JSON.stringify(users));
                            break;
                        }
                    }
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 200 })));
                }
                else {
                    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ status: 401 })));
                }
                return;
            }
            var realHttp = new http_1.Http(realBackend, options);
            var requestOptions = new http_1.RequestOptions({
                method: connection.request.method,
                headers: connection.request.headers,
                body: connection.request.getBody(),
                url: connection.request.url,
                withCredentials: connection.request.withCredentials,
                responseType: connection.request.responseType
            });
            realHttp.request(connection.request.url, requestOptions)
                .subscribe(function (response) {
                connection.mockRespond(response);
            }, function (error) {
                connection.mockError(error);
            });
        }, 500);
    });
    return new http_1.Http(backend, options);
}
exports.fakeBackendFactory = fakeBackendFactory;
exports.fakeBackendProvider = {
    provide: http_1.Http,
    useFactory: fakeBackendFactory,
    deps: [testing_1.MockBackend, http_1.BaseRequestOptions, http_1.XHRBackend]
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
