"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reselect_1 = require("reselect");
var ErrorActionTypes = require("../../../../business-layer/shared-types/actions/error.action.types");
exports.initialState = {
    ids: [],
    entities: {}
};
function reducer(state, action) {
    if (state === void 0) { state = exports.initialState; }
    switch (action.type) {
        case ErrorActionTypes.REPORT_ERROR: {
            var errorObj = Object.assign({}, action.payload, { id: (Date.now()).toString() });
            var error = action.payload;
            return {
                ids: state.ids.concat([error.id]),
                entities: Object.assign({}, state.entities, (_a = {}, _a[error.id] = error, _a))
            };
        }
        case ErrorActionTypes.REMOVE_ERROR: {
            var errorId_1 = action.payload;
            if (state.ids.indexOf(errorId_1) > -1) {
                return state;
            }
            var errorIdsPostRemoval = state.ids.filter(function (id) { return id !== errorId_1; });
            var errorEntities = Object.assign({}, state.entities);
            delete errorEntities[errorId_1];
            return Object.assign({}, state, {
                ids: errorIdsPostRemoval,
                entities: errorEntities
            });
        }
        default: {
            return state;
        }
    }
    var _a;
}
exports.reducer = reducer;
exports.getEntities = function (state) { return state.entities; };
exports.getIds = function (state) { return state.ids; };
exports.getAll = reselect_1.createSelector(exports.getEntities, exports.getIds, function (entities, ids) {
    return ids.map(function (id) { return entities[id]; });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXRhLWxheWVyL25ncngtZGF0YS9yZWR1Y2Vycy9lcnJvci9lcnJvci5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscUNBQTBDO0FBRzFDLHFHQUF1RztBQVExRixRQUFBLFlBQVksR0FBVTtJQUNqQyxHQUFHLEVBQUUsRUFBRTtJQUNQLFFBQVEsRUFBRSxFQUFFO0NBQ2IsQ0FBQztBQUtGLGlCQUF3QixLQUFvQixFQUFFLE1BQTRCO0lBQWxELHNCQUFBLEVBQUEsNEJBQW9CO0lBQzFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEtBQUssZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0IsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQztZQUM5RSxJQUFNLEtBQUssR0FBMEIsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUVwRCxNQUFNLENBQUM7Z0JBQ0wsR0FBRyxFQUFPLEtBQUssQ0FBQyxHQUFHLFNBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLFlBQUksR0FBQyxLQUFLLENBQUMsRUFBRSxJQUFHLEtBQUssTUFBSTthQUNwRSxDQUFDO1FBQ1IsQ0FBQztRQUNELEtBQUssZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0IsSUFBTSxTQUFPLEdBQWtCLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFFOUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2hCLENBQUM7WUFFRCxJQUFNLG1CQUFtQixHQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxLQUFLLFNBQU8sRUFBZCxDQUFjLENBQUMsQ0FBQztZQUVwRSxJQUFJLGFBQWEsR0FBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkQsT0FBTyxhQUFhLENBQUMsU0FBTyxDQUFDLENBQUM7WUFFOUIsTUFBTSxDQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBQztnQkFDN0IsR0FBRyxFQUFFLG1CQUFtQjtnQkFDeEIsUUFBUSxFQUFFLGFBQWE7YUFDekIsQ0FBQyxDQUFDO1FBQ1QsQ0FBQztRQUVELFNBQVMsQ0FBQztZQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQzs7QUFFSCxDQUFDO0FBbENELDBCQWtDQztBQUtZLFFBQUEsV0FBVyxHQUFHLFVBQUMsS0FBWSxJQUFLLE9BQUEsS0FBSyxDQUFDLFFBQVEsRUFBZCxDQUFjLENBQUM7QUFFL0MsUUFBQSxNQUFNLEdBQUcsVUFBQyxLQUFZLElBQUssT0FBQSxLQUFLLENBQUMsR0FBRyxFQUFULENBQVMsQ0FBQztBQUVyQyxRQUFBLE1BQU0sR0FBRyx5QkFBYyxDQUFDLG1CQUFXLEVBQUUsY0FBTSxFQUFFLFVBQUMsUUFBUSxFQUFFLEdBQUc7SUFDdEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQVosQ0FBWSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBwL2RhdGEtbGF5ZXIvbmdyeC1kYXRhL3JlZHVjZXJzL2Vycm9yL2Vycm9yLnJlZHVjZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmltcG9ydCB7IEVycm9yTW9kZWwgIH0gZnJvbSAnLi4vLi4vLi4vLi4vYnVzaW5lc3MtbGF5ZXIvbW9kZWxzL2Vycm9yLm1vZGVsJztcbmltcG9ydCAqIGFzIGVycm9yQWN0aW9ucyBmcm9tICcuLi8uLi9hY3Rpb25zL2Vycm9yLmFjdGlvbnMnO1xuaW1wb3J0ICogYXMgRXJyb3JBY3Rpb25UeXBlcyBmcm9tICcuLi8uLi8uLi8uLi9idXNpbmVzcy1sYXllci9zaGFyZWQtdHlwZXMvYWN0aW9ucy9lcnJvci5hY3Rpb24udHlwZXMnO1xuXG5leHBvcnQgIGludGVyZmFjZSBTdGF0ZSB7XG4gIGlkczogc3RyaW5nW107XG4gIGVudGl0aWVzOiB7IFtpZDogc3RyaW5nXTogRXJyb3JNb2RlbCB9O1xufVxuXG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IFN0YXRlID0ge1xuICBpZHM6IFtdLFxuICBlbnRpdGllczoge31cbn07XG5cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb246IGVycm9yQWN0aW9ucy5BY3Rpb25zKTogU3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBFcnJvckFjdGlvblR5cGVzLlJFUE9SVF9FUlJPUjoge1xuICAgICAgICAgIGxldCBlcnJvck9iaiA9IE9iamVjdC5hc3NpZ24oe30sYWN0aW9uLnBheWxvYWQsIHtpZDooRGF0ZS5ub3coKSkudG9TdHJpbmcoKX0pO1xuICAgICAgICAgIGNvbnN0IGVycm9yOkVycm9yTW9kZWwgPSA8RXJyb3JNb2RlbD5hY3Rpb24ucGF5bG9hZDtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZHM6IFsgLi4uc3RhdGUuaWRzLCBlcnJvci5pZCBdLFxuICAgICAgICAgICAgZW50aXRpZXM6IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmVudGl0aWVzLCB7IFtlcnJvci5pZF06IGVycm9yICB9KVxuICAgICAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgRXJyb3JBY3Rpb25UeXBlcy5SRU1PVkVfRVJST1I6IHtcbiAgICAgICAgICBjb25zdCBlcnJvcklkOnN0cmluZyA9IDxzdHJpbmc+YWN0aW9uLnBheWxvYWQ7XG5cbiAgICAgICAgICBpZiAoc3RhdGUuaWRzLmluZGV4T2YoZXJyb3JJZCkgPiAtMSkge1xuICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBlcnJvcklkc1Bvc3RSZW1vdmFsID0gIHN0YXRlLmlkcy5maWx0ZXIoaWQgPT4gaWQgIT09IGVycm9ySWQpO1xuXG4gICAgICAgICAgbGV0IGVycm9yRW50aXRpZXMgPSAgT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuZW50aXRpZXMpO1xuICAgICAgICAgIGRlbGV0ZSBlcnJvckVudGl0aWVzW2Vycm9ySWRdO1xuXG4gICAgICAgICAgcmV0dXJuICBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSx7XG4gICAgICAgICAgICAgaWRzOiBlcnJvcklkc1Bvc3RSZW1vdmFsLFxuICAgICAgICAgICAgIGVudGl0aWVzOiBlcnJvckVudGl0aWVzXG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfVxuXG59XG5cblxuXG5cbmV4cG9ydCBjb25zdCBnZXRFbnRpdGllcyA9IChzdGF0ZTogU3RhdGUpID0+IHN0YXRlLmVudGl0aWVzO1xuXG5leHBvcnQgY29uc3QgZ2V0SWRzID0gKHN0YXRlOiBTdGF0ZSkgPT4gc3RhdGUuaWRzO1xuXG5leHBvcnQgY29uc3QgZ2V0QWxsID0gY3JlYXRlU2VsZWN0b3IoZ2V0RW50aXRpZXMsIGdldElkcywgKGVudGl0aWVzLCBpZHMpID0+IHtcbiAgcmV0dXJuIGlkcy5tYXAoaWQgPT4gZW50aXRpZXNbaWRdKTtcbn0pO1xuXG5cblxuIl19
